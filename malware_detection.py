import os
import re
import logging
import hashlib
import magic

# Setup logging
logger = logging.getLogger(__name__)

# Simple list of malware signatures (file hashes)
# In a real implementation, this would be more comprehensive or use an external API
MALWARE_SIGNATURES = {
    # Example malware hashes - replace with real ones in production
    "44d88612fea8a8f36de82e1278abb02f": "EICAR-Test-Signature",
    "e4fccb35cb69ced0927bad8939a53fb7": "Fake-Malware-1",
    "f5bc8bc53168e074c3fc659b9ee3f6af": "Fake-Malware-2"
}

# Suspicious patterns that might indicate malware
SUSPICIOUS_PATTERNS = [
    # Executable code patterns
    rb"\x4D\x5A",  # MZ header (DOS/PE)
    rb"\x7F\x45\x4C\x46",  # ELF header
    
    # Script tags that might be hidden in documents
    rb"<script",
    rb"eval\(",
    rb"document\.write",
    
    # Macro indicators for Office documents
    rb"Auto_Open",
    rb"AutoExec",
    rb"Document_Open",
    
    # Other suspicious strings
    rb"cmd\.exe",
    rb"powershell",
    rb"system\(",
    rb"exec\("
]

def calculate_md5(file_path):
    """Calculate MD5 hash of a file"""
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def check_signature_match(file_path):
    """Check if file hash matches known malware signatures"""
    file_hash = calculate_md5(file_path)
    if file_hash in MALWARE_SIGNATURES:
        logger.warning(f"Malware signature match: {MALWARE_SIGNATURES[file_hash]} in file {file_path}")
        return True
    return False

def check_suspicious_patterns(file_path):
    """Check file for suspicious patterns"""
    try:
        with open(file_path, "rb") as f:
            content = f.read()
            
            for pattern in SUSPICIOUS_PATTERNS:
                if re.search(pattern, content):
                    logger.warning(f"Suspicious pattern found in {file_path}: {pattern}")
                    return True
    except Exception as e:
        logger.error(f"Error scanning file for suspicious patterns: {str(e)}")
    
    return False

def check_file_type_mismatch(file_path):
    """
    Check if the file's actual content type matches its extension.
    A mismatch could indicate a disguised malicious file.
    """
    try:
        # Get the file extension
        _, file_extension = os.path.splitext(file_path)
        file_extension = file_extension.lower()
        
        # Use python-magic to detect the actual file type
        mime = magic.Magic(mime=True)
        detected_type = mime.from_file(file_path)
        
        # Define expected MIME types for common extensions
        # This is a simplified mapping and should be more comprehensive in production
        expected_types = {
            '.txt': 'text/plain',
            '.pdf': 'application/pdf',
            '.doc': 'application/msword',
            '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            '.xls': 'application/vnd.ms-excel',
            '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            '.ppt': 'application/vnd.ms-powerpoint',
            '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.png': 'image/png'
        }
        
        # If we have an expected type for this extension, check for mismatch
        if file_extension in expected_types:
            expected_type = expected_types[file_extension]
            if expected_type not in detected_type:
                logger.warning(f"File type mismatch in {file_path}: Expected {expected_type}, got {detected_type}")
                return True
                
    except Exception as e:
        logger.error(f"Error checking file type: {str(e)}")
    
    return False

def check_file_size(file_path, max_size=16*1024*1024):  # 16MB default
    """Check if file size is suspiciously large"""
    try:
        file_size = os.path.getsize(file_path)
        if file_size > max_size:
            logger.warning(f"File size exceeds limit: {file_path} is {file_size} bytes")
            return True
    except Exception as e:
        logger.error(f"Error checking file size: {str(e)}")
    
    return False

def scan_file_for_malware(file_path):
    """
    Scan a file for malware using multiple detection methods.
    
    Args:
        file_path: Path to the file to scan
        
    Returns:
        Boolean indicating if malware was detected
    """
    logger.info(f"Scanning file for malware: {file_path}")
    
    # Perform various checks
    is_malware = False
    
    # Check if file exists
    if not os.path.exists(file_path):
        logger.error(f"File not found: {file_path}")
        return False
    
    # Check against known signatures
    if check_signature_match(file_path):
        is_malware = True
    
    # Check for suspicious patterns
    if check_suspicious_patterns(file_path):
        is_malware = True
    
    # Check for file type mismatch
    if check_file_type_mismatch(file_path):
        is_malware = True
    
    if is_malware:
        logger.warning(f"Malware detected in file: {file_path}")
    else:
        logger.info(f"No malware detected in file: {file_path}")
    
    return is_malware
